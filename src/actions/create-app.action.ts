import { appsApiClient } from "../api";
import { CreateAppParams } from "../types/create-app-params.type";
import { CreateAppRequestDto } from "../types/dto/create-app-request.dto";

export const createAppAction = async (params: CreateAppParams) => {
  const { repository_url, name, ...appParams } = params;

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏ –∏—â–µ–º git –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...");
  const providersResponse = await appsApiClient.getVcsProviders();

  const providers = providersResponse?.providers || [];
  console.log("–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:", providers.length);

  if (!providers.length) {
    throw new Error("–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
  }

  // –ò—â–µ–º git –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –ø–æ–ª–µ provider
  const gitProvider = providers.find((p) => p.provider === "git");
  let providerId;

  if (!gitProvider) {
    console.log("Git –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...");

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º git –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    const addProviderData = {
      provider_type: "git",
      url: repository_url,
      login: "",
      password: "",
    };

    const addProviderResponse = await appsApiClient.addVcsProvider(
      addProviderData
    );

    console.log("Git –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", addProviderResponse);
    providerId = addProviderResponse?.provider?.provider_id;
  } else {
    providerId = gitProvider.provider_id;
    console.log("–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π git –ø—Ä–æ–≤–∞–π–¥–µ—Ä:", providerId);
  }
  if (!providerId) {
    throw new Error("Git –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
  }
  
  // TODO: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–µ–π—Å, –∫–æ–≥–¥–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", providerId);  
  const repositoriesResponse = await appsApiClient.getVcsProviderRepositories(
    providerId
  );

const repositories = repositoriesResponse?.repositories || [];
  const repository = repositories.find((repo) => repo.url === repository_url);

  if (!repository) {
    throw new Error(
      `–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${repository_url} –Ω–µ –Ω–∞–π–¥–µ–Ω —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${providerId}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: ${repositories
        .map((r) => r.url)
        .join(", ")}`
    );
  }

  console.log("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω");

  console.log(`üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "${name}"...`);
  console.log(
    `üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`,
    JSON.stringify({ ...appParams, repository_url, name }, null, 2)
  );

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ ID –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const appCreationParams: CreateAppRequestDto = {
    ...appParams,
    name,
    provider_id: providerId,
    repository_id: repository.id,
    is_auto_deploy: false,
  };

  const response = await appsApiClient.createApp(appCreationParams);

  console.log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ");

  return response?.data?.app || null;
};
