import axios, { AxiosInstance, AxiosResponse, AxiosError } from "axios";

/**
 * –ë–∞–∑–æ–≤—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Timeweb API
 */
export class BaseApiClient {
  private token?: string;
  private baseUrl: string;
  private axiosInstance: AxiosInstance;

  constructor() {
    this.token = "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6IjFrYnhacFJNQGJSI0tSbE1xS1lqIn0.eyJ1c2VyIjoidGk1NjI0NiIsInR5cGUiOiJhcGlfa2V5IiwiYXBpX2tleV9pZCI6ImI0MTIxMThmLWU3MjgtNGM5Ny04NjY2LTcyNTRlZjU5Y2QyYiIsImlhdCI6MTc1NTU4OTg3Mn0.wsaRlnphOy98QDgp3VvgpvmSczL2baru3XJIRwVpol6TRlYdHX6BrZ-zhz6DGnoZhYBL3CNoHi_U1cPQ5vS2dXKBMg0Oq58HXvWUoTIr8tE5mVHy1w8BIy3Rtm6b1aZ5_UjFdsLEU8EotCvLGf6fmGub4D8tbXPCjceuaSL2VemkFZtboq1-gGpgqDzz0gYoZ65eyNKyfK71kWEslYQhwbHeiuOGEky6mAWlsUr_iBpwY5DCQUxeYnE84T3Iawj9nBDx7PsVyGCrx5I2iNgrhnYMdIDIPDhEaMEBxznYRwR44poMMmOg9lU_RgUgzknVNWRt7j2gQlrPiVuMf2tUkyxbULZUlvcSWSMf0Xpq5YlQyg5GskRwO_cVomfBFE6OUSTyoRDoFc6CVolk0YhiOwgnfcrWDfJFrtEukisKopt1aodm2GNaB4slykLwL8KHn70JZ3MLLSzRtSwrRCSoPmvDpgXo5v7XkFj4ILmGYW4-r1vr7NRoDTZ6N7JiWXl6";
    this.baseUrl = "https://timeweb.cloud";

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    this.axiosInstance = axios.create({
      baseURL: this.baseUrl,
      headers: {
        Authorization: `Bearer ${this.token}`,
        "Content-Type": "application/json",
      },
      timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.setupInterceptors();
  }

  checkToken(): void {
    if (!this.token) {
      throw new Error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TIMEWEB_TOKEN");
    }

    if (this.token.trim() === "") {
      throw new Error("‚ùå TIMEWEB_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –ø—É—Å—Ç–æ–π");
    }

    if (this.token.length < 10) {
      throw new Error(
        "‚ùå TIMEWEB_TOKEN —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å"
      );
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private setupInterceptors(): void {
    // –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
    this.axiosInstance.interceptors.request.use(
      (config) => {
        console.log(`üöÄ ${config.method?.toUpperCase()} ${config.url}`);
        if (config.data) {
          console.log(
            "üì§ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:",
            JSON.stringify(config.data, null, 2)
          );
        }
        return config;
      },
      (error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:", error);
        return Promise.reject(error);
      }
    );

    // –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
    this.axiosInstance.interceptors.response.use(
      (response: AxiosResponse) => {
        console.log(
          `‚úÖ ${response.status} ${response.config.method?.toUpperCase()} ${
            response.config.url
          }`
        );
        if (response.data) {
          console.log(
            "üì• –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:",
            JSON.stringify(response.data, null, 2)
          );
        }
        return response;
      },
      (error: AxiosError) => {
        console.log("=== –û–®–ò–ë–ö–ê –û–¢ API TIMEWEB ===");
        console.log("–°—Ç–∞—Ç—É—Å HTTP:", error.response?.status);
        console.log("–ó–∞–≥–æ–ª–æ–≤–∫–∏:", error.response?.headers);
        console.log("–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", error.response?.data);
        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:", error.message);
        console.log("–ö–æ–¥ –æ—à–∏–±–∫–∏:", error.code);
        console.log("================================");
        return Promise.reject(error);
      }
    );
  }

  /**
   * –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  protected async makeRequest<T>(
    method: string,
    endpoint: string,
    data?: any
  ): Promise<T> {
    try {
      this.checkToken();

      const response = await this.axiosInstance.request({
        method,
        url: endpoint,
        data,
      });

      return response.data;
    } catch (error: any) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Axios –æ—à–∏–±–∫–∏
      if (axios.isAxiosError(error)) {
        const status = error.response?.status;
        const statusText = error.response?.statusText;
        const errorData = error.response?.data;

        let errorMessage = `API Error: ${status} ${statusText}`;

        if (errorData?.message) {
          errorMessage += ` - ${errorData.message}`;
        } else if (errorData?.error) {
          errorMessage += ` - ${errorData.error}`;
        } else if (errorData?.detail) {
          errorMessage += ` - ${errorData.detail}`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        switch (status) {
          case 401:
            errorMessage += " (–ü—Ä–æ–≤–µ—Ä—å—Ç–µ TIMEWEB_TOKEN)";
            break;
          case 403:
            errorMessage += " (–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–∫–µ–Ω–∞)";
            break;
          case 404:
            errorMessage += " (API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω)";
            break;
          case 429:
            errorMessage += " (–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤)";
            break;
          case 500:
            errorMessage += " (–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Timeweb Cloud)";
            break;
          case 502:
          case 503:
          case 504:
            errorMessage += " (–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)";
            break;
        }

        throw new Error(errorMessage);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
      if (error.code === "ECONNABORTED") {
        throw new Error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API (30 —Å–µ–∫)");
      }

      if (error.code === "ENOTFOUND") {
        throw new Error("–ù–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ–º–µ–Ω api.timeweb.cloud");
      }

      if (error.code === "ECONNREFUSED") {
        throw new Error("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ");
      }

      throw new Error(`Network Error: ${error.message}`);
    }
  }

  /**
   * GET –∑–∞–ø—Ä–æ—Å
   */
  protected async get<T>(endpoint: string): Promise<T> {
    return this.makeRequest<T>("GET", endpoint);
  }

  /**
   * POST –∑–∞–ø—Ä–æ—Å
   */
  protected async post<T>(endpoint: string, data?: any): Promise<T> {
    return this.makeRequest<T>("POST", endpoint, data);
  }

  /**
   * PUT –∑–∞–ø—Ä–æ—Å
   */
  protected async put<T>(endpoint: string, data?: any): Promise<T> {
    return this.makeRequest<T>("PUT", endpoint, data);
  }

  /**
   * DELETE –∑–∞–ø—Ä–æ—Å
   */
  protected async delete<T>(endpoint: string): Promise<T> {
    return this.makeRequest<T>("DELETE", endpoint);
  }

  /**
   * PATCH –∑–∞–ø—Ä–æ—Å
   */
  protected async patch<T>(endpoint: string, data?: any): Promise<T> {
    return this.makeRequest<T>("PATCH", endpoint, data);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL API
   */
  getBaseUrl(): string {
    return this.baseUrl;
  }
}
export default BaseApiClient;
