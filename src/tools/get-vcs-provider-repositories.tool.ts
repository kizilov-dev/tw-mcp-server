import { z } from "zod";
import { createToolResponse } from "../utils";
import { ToolNames } from "../types/tool-names.enum";
import { getVcsProviderRepositoriesAction } from "../actions/get-vcs-provider-repositories.action";
import { GetVcsProviderRepositoriesRequestDto } from "../types/dto/get-vcs-provider-repositories-request.dto";

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Zod
const inputSchema = {
  provider_id: z.string({
    description: "ID –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤",
  }),
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
const handler = async (params: GetVcsProviderRepositoriesRequestDto) => {
  try {
    console.log(
      `üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${params.provider_id}...`
    );

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
    const repositories = await getVcsProviderRepositoriesAction(params.provider_id);

    if (!repositories || repositories.length === 0) {
      return createToolResponse(`üìã –°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${params.provider_id}:

üí° –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏`);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const repositoriesList = repositories
      .map(
        (repo) =>
          `üîπ ${repo.url} (ID: ${repo.id})`
      )
      .join("\n\n");

    return createToolResponse(`üìã –°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${params.provider_id}:

${repositoriesList}

üí° –í—Å–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: ${repositories.length}

üéâ –°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!`);
  } catch (error) {
    if (error instanceof z.ZodError) {
      const validationErrors = error.errors
        .map((e) => `‚Ä¢ ${e.path.join(".")}: ${e.message}`)
        .join("\n");

      throw new Error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n${validationErrors}`);
    }

    if (error instanceof Error) {
      throw new Error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: ${error.message}`
      );
    }

    throw new Error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${String(error)}`);
  }
};

export const getVcsProviderRepositoriesTool = {
  name: ToolNames.GET_VCS_PROVIDER_REPOSITORIES,
  title: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
  description: "–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ ID",
  inputSchema,
  handler,
};
