import { createToolResponse } from "../utils";
import { getVpcsAction } from "../actions/get-vpcs.action";
import { ToolNames } from "../types/tool-names.enum";

const handler = async () => {
  try {
    const vpcs = await getVpcsAction();

    if (!vpcs || vpcs.length === 0) {
      return createToolResponse(
        `üí° VPC –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é VPC —Å –ø–æ–º–æ—â—å—é tool ${ToolNames.CREATE_VPC}`
      );
    }

    return createToolResponse(`üìã –°–ø–∏—Å–æ–∫ VPC:

    ${JSON.stringify(vpcs, null, 2)}

    üí° –í—Å–µ–≥–æ VPC: ${vpcs.length}

    üéâ –°–ø–∏—Å–æ–∫ VPC —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!`);
  } catch (error) {
    if (error instanceof Error) {
      return createToolResponse(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ VPC. –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`
      );
    }

    return createToolResponse(
      `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ VPC.`
    );
  }
};

export const getVpcsTool = {
  name: ToolNames.GET_VPCS,
  title: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ VPC",
  description:
    "–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —á–∞—Å—Ç–Ω—ã—Ö —Å–µ—Ç–µ–π (VPC) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
  inputSchema: {},
  handler,
};
