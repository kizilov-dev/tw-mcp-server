import { z } from "zod";
import { createToolResponse } from "../utils";
import { getVcsProvidersAction } from "../actions/get-vcs-providers.action";
import { ToolNames } from "../types/tool-names.enum";

const inputSchema = {};

const handler = async () => {
  try {
    console.log("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...");

    const providers = await getVcsProvidersAction();

    return createToolResponse(JSON.stringify(providers, null, 2));

//     if (!providers || providers.length === 0) {
//       return createToolResponse(`üìã –°–ø–∏—Å–æ–∫ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:

// üí° VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

// üí° –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –ø–æ–º–æ—â—å—é tool 'add_vcs_provider'`);
//     }

//     // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
//     const providersList = providers
//       .map(
//         (provider) =>
//           `üîπ ${provider.provider} –ø—Ä–æ–≤–∞–π–¥–µ—Ä (ID: ${provider.provider_id})`
//       )
//       .join("\n\n");

//     return createToolResponse(`üìã –°–ø–∏—Å–æ–∫ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:

// ${providersList}

// üí° –í—Å–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${providers.length}

// üéâ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!`);
  } catch (error) {
    if (error instanceof z.ZodError) {
      const validationErrors = error.errors
        .map((e) => `‚Ä¢ ${e.path.join(".")}: ${e.message}`)
        .join("\n");

      throw new Error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n${validationErrors}`);
    }

    if (error instanceof Error) {
      throw new Error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${error.message}`
      );
    }

    throw new Error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${String(error)}`);
  }
};

export const getVcsProvidersTool = {
  name: ToolNames.GET_VCS_PROVIDERS,
  title: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤",
  description: "–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤",
  inputSchema,
  handler,
};
