import { z } from "zod";
import { createToolResponse, getPresetDatabaseType } from "../utils";
import { createDatabaseAction } from "../actions/create-database.action";
import { ToolNames } from "../types/tool-names.enum";
import { DatabaseTypes } from "../types/database-types.enum";
import { AvailabilityZones } from "../types/availability-zones.enum";
import { dbaasApiClient } from "../api";
import { ResourceNames } from "../types/resource-names.enum";

const inputSchema = {
  name: z
    .string({
      description: "–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
    })
    .min(3, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    .describe("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
  type: z
    .nativeEnum(DatabaseTypes)
    .describe("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
  preset_id: z
    .number({
      description: "ID –ø—Ä–µ—Å–µ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
    })
    .int("ID –ø—Ä–µ—Å–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    .positive("ID –ø—Ä–µ—Å–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    .describe("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - ID –ø—Ä–µ—Å–µ—Ç–∞"),
  availability_zone: z
    .nativeEnum(AvailabilityZones)
    .describe("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - –∑–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"),
  admin_password: z
    .string({
      description: "–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
    })
    .min(8, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
    .describe("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
  floating_ip: z
    .string({
      description: "Floating IP –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
    })
    .ip({
      version: "v4",
      message: "Floating IP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º IPv4 –∞–¥—Ä–µ—Å–æ–º",
    })
    .describe("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - floating IP –∞–¥—Ä–µ—Å"),
  vpc_id: z
    .string({
      description: `ID –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Å–µ—Ç–∏ (VPC). –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ VPC –º–æ–∂–Ω–æ –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö ${ResourceNames.GET_VPCS}`,
    })
    .min(1, "ID VPC –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    .describe("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - ID VPC"),
  hash_type: z
    .string({
      description: "–¢–∏–ø —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π",
    })
    .default("caching_sha2")
    .describe(
      "–ù–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - —Ç–∏–ø —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: caching_sha2)"
    ),
  auto_backups: z
    .boolean({
      description: "–í–∫–ª—é—á–∏—Ç—å –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏",
    })
    .default(true)
    .describe(
      "–ù–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: true)"
    ),
};

const handler = async (params: {
  name: string;
  type: DatabaseTypes;
  preset_id: number;
  availability_zone: AvailabilityZones;
  admin_password: string;
  floating_ip: string;
  vpc_id: string;
  hash_type?: "caching_sha2";
}) => {
  try {
    const availableZones = Object.values(AvailabilityZones);

    if (!availableZones.includes(params.availability_zone)) {
      return createToolResponse(
        `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∑–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${params.availability_zone}. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: ${availableZones.join(", ")}`
      );
    }

    const availableTypes = Object.values(DatabaseTypes);

    if (!availableTypes.includes(params.type)) {
      return createToolResponse(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${params.type}. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: ${availableTypes.join(", ")}`
      );
    }

    const allPresets = await dbaasApiClient.getDatabasePresets();
    const availablePresets = allPresets.filter(preset => preset.type === getPresetDatabaseType(params.type));

    if (!availablePresets || !availablePresets.length) {
      return createToolResponse(
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "${params.type}" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É –ø—Ä–µ—Å–µ—Ç–∞`
      );
    }

    const preset = availablePresets.find(preset => preset.id === params.preset_id);

    if (!preset) {
      return createToolResponse(
        `‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–µ—Å–µ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "${params.name}" –≤ Timeweb Cloud. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${JSON.stringify(availablePresets, null, 2)}`
      );
    }    

    const db = await createDatabaseAction({
      name: params.name,
      type: params.type,
      presetId: params.preset_id,
      availabilityZone: params.availability_zone,
      adminPassword: params.admin_password,
      floatingIp: params.floating_ip,
      vpcId: params.vpc_id,
      hashType: params.hash_type || "caching_sha2",
    });

    if (!db) {
      return createToolResponse(
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö "${params.name}"`
      );
    }

    return createToolResponse(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üìã –î–µ—Ç–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${db.name}
‚Ä¢ ID: ${db.id}
‚Ä¢ –¢–∏–ø: ${db.type}
‚Ä¢ –°—Ç–∞—Ç—É—Å: ${db.status}
‚Ä¢ –ü–æ—Ä—Ç: ${db.port}
‚Ä¢ –ó–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${db.availability_zone}
‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: ${db.location}
‚Ä¢ –ü—Ä–µ—Å–µ—Ç: ${db.preset_id}
‚Ä¢ –ü—Ä–æ–µ–∫—Ç: ${db.project_id}
‚Ä¢ –¢–∏–ø —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${db.hash_type}
‚Ä¢ –ü—É–±–ª–∏—á–Ω–∞—è —Å–µ—Ç—å: ${db.is_enabled_public_network ? "‚úÖ" : "‚ùå"}
‚Ä¢ –ê–≤—Ç–æ–±—ç–∫–∞–ø—ã: ${db.is_autobackups_enabled ? "‚úÖ" : "‚ùå"}
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${db.is_secure_connection_enabled ? "‚úÖ" : "‚ùå"}
‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: ${new Date(db.created_at).toLocaleString("ru-RU")}
–î–ê–ù–ù–´–ï –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• –ë–£–î–£–¢ –î–û–°–¢–£–ü–ù–´ –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –í –ü–ê–ù–ï–õ–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø TIMEWEB CLOUD
üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`);
  } catch (error) {
    if (error instanceof Error) {
      return createToolResponse(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`
      );
    }
    return createToolResponse(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
  }
};

export const createDatabaseTool = {
  name: ToolNames.CREATE_DATABASE,
  title: "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
  description:
    "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Timeweb Cloud —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
  inputSchema,
  handler,
};
