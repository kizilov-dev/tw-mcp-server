import { z } from "zod";
import { createToolResponse } from "../utils";
import { createVpcAction } from "../actions/create-vpc.action";
import { ToolNames } from "../types/tool-names.enum";
import { AvailabilityZones } from "../types/availability-zones.enum";

const inputSchema = {
  availability_zone: z
    .nativeEnum(AvailabilityZones)
    .describe("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - –∑–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"),
  name: z
    .string({
      description: "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Å–µ—Ç–∏",
    })
    .describe("–ù–∞–∑–≤–∞–Ω–∏–µ VPC")
    .default(""),
  subnet_v4: z
    .string({
      description: "IPv4 –ø–æ–¥—Å–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CIDR (–Ω–∞–ø—Ä–∏–º–µ—Ä: 192.168.0.0/24)",
    })
    .regex(
      /^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$/,
      "–ü–æ–¥—Å–µ—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CIDR (–Ω–∞–ø—Ä–∏–º–µ—Ä: 192.168.0.0/24)"
    )
    .describe("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - IPv4 –ø–æ–¥—Å–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CIDR"),
};

const handler = async (params: {
  availability_zone: AvailabilityZones;
  name: string;
  subnet_v4: string;
}) => {
  try {
    const availableZones = Object.values(AvailabilityZones);

    if (!availableZones.includes(params.availability_zone)) {
      return createToolResponse(
        `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∑–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${params.availability_zone}. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: ${availableZones.join(", ")}`
      );
    }

    const vpc = await createVpcAction(
      params.availability_zone,
      params.name,
      params.subnet_v4
    );

    if (!vpc) {
      return createToolResponse(
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPC "${params.name}" –≤ –∑–æ–Ω–µ "${params.availability_zone}"`
      );
    }

    return createToolResponse(`‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üìã –î–µ—Ç–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π VPC:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${vpc.name}
‚Ä¢ ID: ${vpc.id}
‚Ä¢ –ó–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${vpc.availability_zone}
‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: ${vpc.location}
‚Ä¢ –ü–æ–¥—Å–µ—Ç—å IPv4: ${vpc.subnet_v4}
‚Ä¢ –¢–∏–ø: ${vpc.type}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${vpc.description || "–ù–µ—Ç"}
‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–π IP: ${vpc.public_ip || "–ù–µ—Ç"}
‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: ${new Date(vpc.created_at).toLocaleString("ru-RU")}
‚Ä¢ –ó–∞–Ω—è—Ç—ã–µ –∞–¥—Ä–µ—Å–∞: ${vpc.busy_address.join(", ")}

üéâ VPC –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`);
  } catch (error) {
    if (error instanceof Error) {
      return createToolResponse(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPC. –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`
      );
    }
    return createToolResponse(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPC`);
  }
};

export const createVpcTool = {
  name: ToolNames.CREATE_VPC,
  title: "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Å–µ—Ç–∏ (VPC)",
  description:
    "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å–µ—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–æ–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏",
  inputSchema,
  handler,
};
