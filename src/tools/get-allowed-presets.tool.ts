import { z } from "zod";
import { appsApiClient } from "../api";
import { ToolNames } from "../types/tool-names.enum";
import { createToolResponse } from "../utils";

const inputSchema = {};

const handler = async () => {
  try {
    console.log("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤...");

    const presets = await appsApiClient.getAllowedPresets();

    const responseMessage = `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:

üîπ Backend –ø—Ä–µ—Å–µ—Ç—ã:
${
  presets.backend_presets
    ?.map(
      (preset) =>
        `ID: ${preset.id} | ${preset.description_short}
     üí∞ –¶–µ–Ω–∞: ${preset.price}‚ÇΩ/–º–µ—Å
     üñ•Ô∏è CPU: ${preset.cpu}
     üíæ RAM: ${preset.ram}GB
     üíø –î–∏—Å–∫: ${preset.disk}GB
     ‚ö° –ß–∞—Å—Ç–æ—Ç–∞: ${preset.cpu_frequency}`
    )
    .join("\n\n") || "  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö backend –ø—Ä–µ—Å–µ—Ç–æ–≤"
}

üîπ Frontend –ø—Ä–µ—Å–µ—Ç—ã:
${
  presets.frontend_presets
    ?.map(
      (preset) =>
        `ID: ${preset.id} | ${preset.description_short}
     üí∞ –¶–µ–Ω–∞: ${preset.price}‚ÇΩ/–º–µ—Å
     üíø –î–∏—Å–∫: ${preset.disk}GB`
    )
    .join("\n\n") || "  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö frontend –ø—Ä–µ—Å–µ—Ç–æ–≤"
}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –ø—Ä–µ—Å–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø–æ–ª–µ preset_id`;

    return createToolResponse(responseMessage);
  } catch (error) {
    if (error instanceof z.ZodError) {
      const validationErrors = error.errors
        .map((e) => `‚Ä¢ ${e.path.join(".")}: ${e.message}`)
        .join("\n");

      throw new Error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n${validationErrors}`);
    }

    if (error instanceof Error) {
      throw new Error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤: ${error.message}`);
    }

    throw new Error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${String(error)}`);
  }
};

export const getAllowedPresetsTool = {
  name: ToolNames.GET_ALLOWED_PRESETS,
  title: "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
  description: "–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
  inputSchema,
  handler,
};
