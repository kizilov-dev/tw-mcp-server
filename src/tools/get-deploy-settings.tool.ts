import { z } from "zod";
import { ToolNames } from "../types/tool-names.enum";
import { createToolResponse } from "../utils";
import { getDeploySettingsAction } from "../actions/get-deploy-settings.action";

const outputSchema = {
  framework: z.string({
    description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞",
  }),
  build_cmd: z.string({
    description: "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
  }),
  index_dir: z.string({
    description: "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å index —Ñ–∞–π–ª–æ–º (–¥–ª—è frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)",
  }),
  run_cmd: z
    .string({
      description: "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è backend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)",
    })
    .optional(),
};

const handler = async () => {
  try {
    const deploySettings = await getDeploySettingsAction();

    const responseMessage = `üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–ª–æ—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:

${deploySettings
  .map(
    (setting) => `üîπ ${setting.framework}:
     build_cmd: ${setting.build_cmd ?? ""}
     index_dir: ${setting.index_dir ?? ""}
     run_cmd: ${setting.run_cmd ?? ""}`
  )
  .join("\n\n")}

üí° –≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—è—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞`;

    return createToolResponse(responseMessage);
  } catch (error) {
    if (error instanceof Error) {
      return createToolResponse(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–µ–ø–ª–æ—è. –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`
      );
    }

    return createToolResponse(
      `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–µ–ø–ª–æ—è.`
    );
  }
};

export const getDeploySettingsTool = {
  name: ToolNames.GET_DEPLOY_SETTINGS,
  title: "–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–µ–ø–ª–æ—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
  description:
    "–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–µ–ø–ª–æ—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤",
  inputSchema: {},
  outputSchema,
  handler,
};
