import { z } from "zod";
import { createToolResponse } from "../utils";
import { AddVcsProviderRequestDto } from "../types/dto/add-vcs-provider-request.dto";
import { addVcsProviderAction } from "../actions/add-vcs-provider.action";
import { ToolNames } from "../types/tool-names.enum";

const inputSchema = {
  url: z
    .string({
      description:
        "URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://github.com/username/repo.git)",
    })
    .url("URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"),
  login: z
    .string({
      // TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
      description:
        "–õ–æ–≥–∏–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π)",
    })
    .optional(),
  password: z
    .string({
      description:
        "–ü–∞—Ä–æ–ª—å –∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π)",
    })
    .optional(),
  provider_type: z.enum(["git"], {
    description: "–¢–∏–ø VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. –í—Å–µ–≥–¥–∞ git",
  }),
};

const handler = async (params: AddVcsProviderRequestDto) => {
  try {
    await addVcsProviderAction(params);

    return createToolResponse(`‚úÖ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!

üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:
‚Ä¢ –¢–∏–ø: ${params.provider_type}
‚Ä¢ URL: ${params.url}
${params.login ? `‚Ä¢ –õ–æ–≥–∏–Ω: ${params.login}` : ""}
${params.password ? `‚Ä¢ –ü–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω: ***` : ""}

üéâ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`);
  } catch (error) {
    if (error instanceof Error) {
      return createToolResponse(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ${error.message}`
      );
    }

    return createToolResponse(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.`);
  }
};

export const addVcsProviderTool = {
  name: ToolNames.ADD_VCS_PROVIDER,
  title: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
  description: "–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä",
  inputSchema,
  handler,
};
