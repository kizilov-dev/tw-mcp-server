import { z } from "zod";
import { createToolResponse } from "../utils";
import { ToolNames } from "../types/tool-names.enum";
import { createFloatingIpAction } from "../actions/create-floating-ip.action";
import { AvailabilityZones } from "../types/availability-zones.enum";

const inputSchema = {
  availability_zone: z.nativeEnum(AvailabilityZones)
    .describe("–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - –∑–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"),
  is_ddos_guard: z
    .boolean({
      description: "–í–∫–ª—é—á–∏—Ç—å –ª–∏ DDoS –∑–∞—â–∏—Ç—É –¥–ª—è floating IP",
    })
    .default(false)
    .describe("–ù–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï - DDoS –∑–∞—â–∏—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: false)"),
};

const handler = async (params: {
  availability_zone: AvailabilityZones;
  is_ddos_guard?: boolean;
}) => {
  try {
    const availableZones = Object.values(AvailabilityZones);

    if (!availableZones.includes(params.availability_zone)) {
      return createToolResponse(
        `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∑–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${params.availability_zone}. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: ${availableZones.join(", ")}`
      );
    }

    const ip = await createFloatingIpAction(
      params.availability_zone,
      params.is_ddos_guard || false
    );

    if (!ip) {
      return createToolResponse(
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å floating IP –≤ –∑–æ–Ω–µ "${params.availability_zone}"`
      );
    }

    return createToolResponse(`‚úÖ Floating IP —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üìã –î–µ—Ç–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ IP:
‚Ä¢ IP –∞–¥—Ä–µ—Å: ${ip.ip}
‚Ä¢ ID: ${ip.id}
‚Ä¢ –ó–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${ip.availability_zone}
‚Ä¢ DDoS Guard: ${ip.is_ddos_guard ? "‚úÖ –í–∫–ª—é—á–µ–Ω" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${ip.comment || "–ù–µ—Ç"}
‚Ä¢ –°–æ–∑–¥–∞–Ω: ${new Date(ip.created_at).toLocaleString("ru-RU")}

üéâ Floating IP –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`);
  } catch (error) {
    if (error instanceof Error) {
      return createToolResponse(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è floating IP. –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`
      );
    }
    return createToolResponse(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ floating IP`);
  }
};

export const createFloatingIpTool = {
  name: ToolNames.CREATE_FLOATING_IP,
  title: "–°–æ–∑–¥–∞–Ω–∏–µ Floating IP",
  description: "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π floating IP –∞–¥—Ä–µ—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–æ–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏",
  inputSchema,
  handler,
};
