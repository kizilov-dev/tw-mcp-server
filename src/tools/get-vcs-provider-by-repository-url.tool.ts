import { createToolResponse } from "../utils";
import { ToolNames } from "../types/tool-names.enum";
import { z } from "zod";
import { getVcsProvidersAction } from "../actions/get-vcs-providers.action";

const inputSchema = {
  repository_url: z.string({
    description: "URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
  }),
};

const handler = async (params: { repository_url: string }) => {
  try {
    const providers = await getVcsProvidersAction();

    const provider = providers?.find((provider) =>
      // –†–µ—à—É–ª—è—Ä–∫–∞ —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç URL (–ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Timeweb Cloud) –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      params.repository_url.includes(provider.login.replace(/^[^\/]+\//, ''))
    );

    if (!provider) {
      return createToolResponse(
        `üí° VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –ø–æ–º–æ—â—å—é tool ${ToolNames.ADD_VCS_PROVIDER}`
      );
    }

    return createToolResponse(`üîç VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞–π–¥–µ–Ω:

    üîπ ${provider.provider} –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    ID: ${provider.provider_id}
    Name: ${provider.login}

    üéâ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω!`);
  } catch (error) {
    if (error instanceof Error) {
      return createToolResponse(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`
      );
    }

    return createToolResponse(
      `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.`
    );
  }
};

export const getVcsProviderByRepositoryUrlTool = {
  name: ToolNames.GET_VCS_PROVIDER_BY_REPOSITORY_URL,
  title: "–ü–æ–∏—Å–∫ VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
  description: "–ù–∞—Ö–æ–¥–∏—Ç VCS –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
  inputSchema,
  handler,
};
